# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  win: circleci/windows@4.1
  aws-code-deploy: circleci/aws-code-deploy@2.0.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  test:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: rust:latest
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Test workspace"
          command: "cargo test --workspace"

  build-and-deploy-server:
    docker:
      - image: rust:latest
    steps:
      - checkout
      - run:
          name: "build and deploy server"
          command: |
            cargo build --release -p server
            ./install.sh

  build-win: # name of your job
    # shell: bash.exe
    executor:
      name: win/default # executor type
      size: "medium" # resource class, can be "medium", "large", "xlarge", "2xlarge", defaults to "medium" if not specified
    working_directory: C:\Users\circleci\project
    steps:
      - checkout
      - run:
          name: install
          command: |
            $url = "https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe"
            $outpath = "C:\Users\circleci\project\rustup-init.exe"
            Invoke-WebRequest -Uri $url -OutFile $outpath
            C:\Users\circleci\project\rustup-init.exe -y
            ls C:\Users\circleci\.cargo\bin
      - run:
          environment:
            CARGO_NET_GIT_FETCH_WITH_CLI: "true"
          name: "build dashboard"
          command: |
            ~\.cargo\bin\cargo.exe build --release -p dashboard
            ls .
            ls .\target
            ls .\target\release
          # mv .\target\release\dashboard.exe dashboard.exe 
      # - run:
      #     environment:
      #       CARGO_NET_GIT_FETCH_WITH_CLI: "true"
      #     name: "build widget"
      #     command: |
      #       ~\.cargo\bin\cargo.exe build --release -p widget
      - store_artifacts:
          path: |
            C:\Users\circleci\project\target\release\dashboard.exe
          destination: dashboard.exe
      # - store_artifacts:
      #     path: |
      #       .\target\release\widget.exe
      #     destination: "widget.exe"

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  server-workflow:
    when:
      matches:
        pattern: |
          ^server-v\d+.\d+.\d+$
        value: << pipeline.git.tag >>
    jobs:
      - build-and-deploy-server

  test-workflow:
    jobs:
      - test

  windows-build-workflow:
    jobs:
      - build-win
